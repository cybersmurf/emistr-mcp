<#
PowerShell wrapper: calls `mcp_client.py` and copies its JSON output to clipboard.
Usage:
 .\run_mcp_and_clip.ps1 -Name get_orders -Arguments '{"limit":10}'
 or
 MCP_URL=http://127.0.0.1:9201/mcp .\run_mcp_and_clip.ps1 -Name get_orders
#>
param(
 [Parameter(Mandatory=$true)][string]$Name,
 [string]$Arguments = "{}",
 [string]$Python = "python",
 [string]$ClientScript = "mcp_client.py"
)

# Resolve script path relative to repo root (this script is in tools/)
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$repoRoot = Resolve-Path (Join-Path $scriptDir "..")
$clientPath = Join-Path $repoRoot $ClientScript

if (-not (Test-Path $clientPath)) {
 Write-Error "Client script not found at $clientPath"
 exit2
}

# Build command
$argJson = $Arguments
# Validate JSON
try {
 $null = ConvertFrom-Json $argJson -ErrorAction Stop
} catch {
 Write-Error "Invalid JSON in -Arguments"
 exit3
}

$procInfo = Start-Process -FilePath $Python -ArgumentList @($clientPath, '--name', $Name, '--arguments', $Arguments) -NoNewWindow -RedirectStandardOutput -RedirectStandardError -PassThru -Wait
$output = $procInfo.StandardOutput.ReadToEnd()
$err = $procInfo.StandardError.ReadToEnd()

if ($procInfo.ExitCode -ne0) {
 Write-Error "Client exited with code $($procInfo.ExitCode)"
 if ($err) { Write-Error $err }
 if ($output) { Write-Output $output }
 exit $procInfo.ExitCode
}

# Try to parse as JSON and pretty-print; copy to clipboard
try {
 $obj = ConvertFrom-Json $output
 $pretty = $obj | ConvertTo-Json -Depth10
} catch {
 $pretty = $output
}

# Copy to clipboard (works in Windows PowerShell and PowerShell Core)
try {
 Set-Clipboard -Value $pretty
 Write-Host "Output copied to clipboard"
} catch {
 # Fallback: write to temp file
 $tmp = [System.IO.Path]::GetTempFileName()
 Set-Content -Path $tmp -Value $pretty -Encoding UTF8
 Write-Host "Clipboard not available; output written to $tmp"
}

# Also print to console
Write-Output $pretty
